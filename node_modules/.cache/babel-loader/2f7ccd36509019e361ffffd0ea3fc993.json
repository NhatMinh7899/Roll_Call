{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bnm78\\\\Desktop\\\\New folder\\\\FileTmp\\\\roll-call\\\\src\\\\component\\\\TeacherListResults.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Avatar, Box, Card, Checkbox, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport getInitials from '../utils/getInitials';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TeacherListResults = ({\n  customers,\n  ...rest\n}) => {\n  _s();\n\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = event => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map(customer => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, selectedIndex), selectedCustomerIds.slice(selectedIndex + 1));\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, { ...rest,\n    children: [/*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 1050\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.length === customers.length,\n                  color: \"primary\",\n                  indeterminate: selectedCustomerIds.length > 0 && selectedCustomerIds.length < customers.length,\n                  onChange: handleSelectAll\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Role\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: customers.slice(0, limit).map(customer => /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              selected: selectedCustomerIds.indexOf(customer.id) !== -1,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.indexOf(customer.id) !== -1,\n                  onChange: event => handleSelectOne(event, customer.id),\n                  value: \"true\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    alignItems: 'center',\n                    display: 'flex'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    src: customer.img,\n                    sx: {\n                      mr: 2\n                    },\n                    children: getInitials(customer.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textPrimary\",\n                  variant: \"body1\",\n                  children: customer.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: customer.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: customer.role\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: moment(customer.createdAt).format('DD/MM/YYYY')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this)]\n            }, customer.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      component: \"div\",\n      count: customers.length,\n      onPageChange: handlePageChange,\n      onRowsPerPageChange: handleLimitChange,\n      page: page,\n      rowsPerPage: limit,\n      rowsPerPageOptions: [5, 10, 25]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TeacherListResults, \"32UrhhRBCjd2Tz6LHc3GpM4px8E=\");\n\n_c = TeacherListResults;\nTeacherListResults.propTypes = {\n  customers: PropTypes.array.isRequired\n};\nexport default TeacherListResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"TeacherListResults\");","map":{"version":3,"sources":["C:/Users/bnm78/Desktop/New folder/FileTmp/roll-call/src/component/TeacherListResults.js"],"names":["useState","PropTypes","moment","PerfectScrollbar","Avatar","Box","Card","Checkbox","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","getInitials","TeacherListResults","customers","rest","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","handleSelectAll","event","newSelectedCustomerIds","target","checked","map","customer","id","handleSelectOne","selectedIndex","indexOf","concat","slice","length","handleLimitChange","value","handlePageChange","newPage","minWidth","alignItems","display","img","mr","name","email","role","createdAt","format","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport getInitials from '../utils/getInitials';\r\n\r\nconst TeacherListResults = ({ customers, ...rest }) => {\r\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\r\n  const [limit, setLimit] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const handleSelectAll = (event) => {\r\n    let newSelectedCustomerIds;\r\n\r\n    if (event.target.checked) {\r\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\r\n    } else {\r\n      newSelectedCustomerIds = [];\r\n    }\r\n\r\n    setSelectedCustomerIds(newSelectedCustomerIds);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedCustomerIds.indexOf(id);\r\n    let newSelectedCustomerIds = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\r\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\r\n        selectedCustomerIds.slice(0, selectedIndex),\r\n        selectedCustomerIds.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedCustomerIds(newSelectedCustomerIds);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n  };\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <Card {...rest}>\r\n      <PerfectScrollbar>\r\n        <Box sx={{ minWidth: 1050 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={selectedCustomerIds.length === customers.length}\r\n                    color=\"primary\"\r\n                    indeterminate={\r\n                      selectedCustomerIds.length > 0\r\n                      && selectedCustomerIds.length < customers.length\r\n                    }\r\n                    onChange={handleSelectAll}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  Id\r\n                </TableCell>\r\n                <TableCell>\r\n                  Name\r\n                </TableCell>\r\n                <TableCell>\r\n                  Email\r\n                </TableCell>\r\n                <TableCell>\r\n                  Role\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {customers.slice(0, limit).map((customer) => (\r\n                <TableRow\r\n                  hover\r\n                  key={customer.id}\r\n                  selected={selectedCustomerIds.indexOf(customer.id) !== -1}\r\n                >\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      checked={selectedCustomerIds.indexOf(customer.id) !== -1}\r\n                      onChange={(event) => handleSelectOne(event, customer.id)}\r\n                      value=\"true\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box\r\n                      sx={{\r\n                        alignItems: 'center',\r\n                        display: 'flex'\r\n                      }}\r\n                    >\r\n                      <Avatar\r\n                        src={customer.img}\r\n                        sx={{ mr: 2 }}\r\n                      >\r\n                        {getInitials(customer.name)}\r\n                      </Avatar>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"body1\"\r\n                      >\r\n                        {customer.name}\r\n                      </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {customer.email}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {customer.role}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(customer.createdAt).format('DD/MM/YYYY')}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={customers.length}\r\n        onPageChange={handlePageChange}\r\n        onRowsPerPageChange={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nTeacherListResults.propTypes = {\r\n  customers: PropTypes.array.isRequired\r\n};\r\n\r\nexport default TeacherListResults;\r\n"]},"metadata":{},"sourceType":"module"}